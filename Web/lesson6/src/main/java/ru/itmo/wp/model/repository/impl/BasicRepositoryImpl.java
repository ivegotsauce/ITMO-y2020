package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BasicRepositoryImpl {
    private static final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    public <T> void save(T t, String ... args) {
        String className = t.getClass().getSimpleName();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(getInsertQueryTemplate(), Statement.RETURN_GENERATED_KEYS)) {
                setEnteredFields(statement, t, args);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + className + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        setGeneratedFields(generatedKeys, t);
                    } else {
                        throw new RepositoryException("Can't save " + className + " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + className + ".", e);
        }
    }

    public <T> List<T> findImpl(String sql, Class<T> clazz, Long... obj) {
        List<T> elements = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                for (int i = 1; i <= obj.length; i++) {
                    statement.setLong(i, obj[i - 1]);
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    T t;
                    while ((t = toBasicType(statement.getMetaData(), resultSet, clazz)) != null) {
                        elements.add(t);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + clazz.getSimpleName(), e);
        }
        return elements;
    }

    protected abstract <T> T toBasicType(ResultSetMetaData metaData, ResultSet resultSet, Class<T> tClass) throws SQLException;
    protected abstract <T> void setEnteredFields(PreparedStatement statement, T t, String ... args) throws SQLException;
    protected abstract <T> void setGeneratedFields(ResultSet generatedKeys, T t) throws SQLException;
    protected abstract String getInsertQueryTemplate();
}
